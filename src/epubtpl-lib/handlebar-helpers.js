"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const handlebars_1 = require("handlebars");
exports.Handlebars = handlebars_1.default;
// @ts-ignore
const path = require("path");
// @ts-ignore
const fs = require("fs");
const _1 = require(".");
exports.mimetypes = {
    'jpeg': 'image/jpeg',
    'jpg': 'image/jpeg',
    'bmp': 'image/bmp',
    'png': 'image/png',
    'svg': 'image/svg+xml',
    'gif': 'image/gif',
    'ttf': 'application/x-font-truetype',
    'css': 'text/css',
};
handlebars_1.default.registerHelper('extension', function (str) {
    return ext(str);
});
handlebars_1.default.registerHelper('mimetype', function (str) {
    return exports.mimetypes[ext(str)];
});
handlebars_1.default.registerHelper('import', function (filePath, options) {
    filePath = path.normalize(filePath);
    let source = fs.readFileSync(filePath).toString();
    return new handlebars_1.default.SafeString(handlebars_1.default.compile(source)(Object.create(this)));
});
function ext(str) {
    if (str === undefined) {
        return str;
    }
    return str.substr(str.lastIndexOf('.') + 1);
}
function compileTpl(template, content, skipFormatting) {
    return _1.default.formatHTML(handlebars_1.default.compile(template)(content), skipFormatting);
}
exports.compileTpl = compileTpl;
exports.default = handlebars_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlYmFyLWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJoYW5kbGViYXItaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFvQztBQXFEM0IscUJBckRGLG9CQUFVLENBcURFO0FBcERuQixhQUFhO0FBQ2IsNkJBQTZCO0FBQzdCLGFBQWE7QUFDYix5QkFBeUI7QUFFekIsd0JBQWlDO0FBRXBCLFFBQUEsU0FBUyxHQUFHO0lBQ3hCLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLEtBQUssRUFBRSxZQUFZO0lBQ25CLEtBQUssRUFBRSxXQUFXO0lBQ2xCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLEtBQUssRUFBRSxlQUFlO0lBQ3RCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLEtBQUssRUFBRSw2QkFBNkI7SUFDcEMsS0FBSyxFQUFFLFVBQVU7Q0FDakIsQ0FBQztBQUVGLG9CQUFVLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxVQUFVLEdBQUc7SUFFbkQsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUM7QUFFSCxvQkFBVSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxHQUFHO0lBRWxELE9BQU8saUJBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUMsQ0FBQztBQUVILG9CQUFVLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxVQUFVLFFBQVEsRUFBRSxPQUFPO0lBRTlELFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXBDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFbEQsT0FBTyxJQUFJLG9CQUFVLENBQUMsVUFBVSxDQUFDLG9CQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25GLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxHQUFHLENBQUMsR0FBRztJQUVmLElBQUksR0FBRyxLQUFLLFNBQVMsRUFDckI7UUFDQyxPQUFPLEdBQUcsQ0FBQztLQUNYO0lBRUQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLGNBQXdCO0lBRXJFLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxvQkFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNyRixDQUFDO0FBSEQsZ0NBR0M7QUFJRCxrQkFBZSxvQkFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnaGFuZGxlYmFycyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcblxyXG5pbXBvcnQgZXB1YlRwbExpYiwgeyAgfSBmcm9tICcuJztcclxuXHJcbmV4cG9ydCBjb25zdCBtaW1ldHlwZXMgPSB7XHJcblx0J2pwZWcnOiAnaW1hZ2UvanBlZycsXHJcblx0J2pwZyc6ICdpbWFnZS9qcGVnJyxcclxuXHQnYm1wJzogJ2ltYWdlL2JtcCcsXHJcblx0J3BuZyc6ICdpbWFnZS9wbmcnLFxyXG5cdCdzdmcnOiAnaW1hZ2Uvc3ZnK3htbCcsXHJcblx0J2dpZic6ICdpbWFnZS9naWYnLFxyXG5cdCd0dGYnOiAnYXBwbGljYXRpb24veC1mb250LXRydWV0eXBlJyxcclxuXHQnY3NzJzogJ3RleHQvY3NzJyxcclxufTtcclxuXHJcbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2V4dGVuc2lvbicsIGZ1bmN0aW9uIChzdHIpXHJcbntcclxuXHRyZXR1cm4gZXh0KHN0cik7XHJcbn0pO1xyXG5cclxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignbWltZXR5cGUnLCBmdW5jdGlvbiAoc3RyKVxyXG57XHJcblx0cmV0dXJuIG1pbWV0eXBlc1tleHQoc3RyKV07XHJcbn0pO1xyXG5cclxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaW1wb3J0JywgZnVuY3Rpb24gKGZpbGVQYXRoLCBvcHRpb25zKVxyXG57XHJcblx0ZmlsZVBhdGggPSBwYXRoLm5vcm1hbGl6ZShmaWxlUGF0aCk7XHJcblxyXG5cdGxldCBzb3VyY2UgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCk7XHJcblxyXG5cdHJldHVybiBuZXcgSGFuZGxlYmFycy5TYWZlU3RyaW5nKEhhbmRsZWJhcnMuY29tcGlsZShzb3VyY2UpKE9iamVjdC5jcmVhdGUodGhpcykpKTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBleHQoc3RyKVxyXG57XHJcblx0aWYgKHN0ciA9PT0gdW5kZWZpbmVkKVxyXG5cdHtcclxuXHRcdHJldHVybiBzdHI7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gc3RyLnN1YnN0cihzdHIubGFzdEluZGV4T2YoJy4nKSArIDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVRwbCh0ZW1wbGF0ZSwgY29udGVudCwgc2tpcEZvcm1hdHRpbmc/OiBib29sZWFuKTogc3RyaW5nXHJcbntcclxuXHRyZXR1cm4gZXB1YlRwbExpYi5mb3JtYXRIVE1MKEhhbmRsZWJhcnMuY29tcGlsZSh0ZW1wbGF0ZSkoY29udGVudCksIHNraXBGb3JtYXR0aW5nKTtcclxufVxyXG5cclxuZXhwb3J0IHsgSGFuZGxlYmFycyB9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlYmFycztcclxuIl19