{"version":3,"file":"ajax.js","sourceRoot":"","sources":["ajax.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require('fs-extra');\nimport fetch = require('isomorphic-fetch');\nimport path = require('upath2');\nimport { IFiles } from '../config';\nimport { fromBuffer as fileType } from 'file-type';\nimport { hashSum } from '../lib/util';\nimport imagemin = require('imagemin');\nimport imageminJpegtran = require('imagemin-jpegtran');\nimport imageminPngquant = require('imagemin-pngquant');\nimport imageminOptipng = require('imagemin-optipng');\nimport imageminWebp = require('imagemin-webp');\nimport imageminMozjpeg = require('imagemin-mozjpeg');\nimport Bluebird = require('bluebird');\nimport BluebirdCancellation from 'bluebird-cancellation';\nimport { TimeoutError } from 'bluebird';\n\nexport { fetch }\n\n/**\n * 處理附加檔案 本地檔案 > url\n */\nexport async function fetchFile(file: IFiles, ...argv)\n{\n\tlet _file;\n\tlet err;\n\n\tif (file.data)\n\t{\n\t\t_file = file.data;\n\t}\n\n\tlet is_from_url: boolean;\n\n\tif (!_file && file.file)\n\t{\n\t\t_file = await fs.readFile(file.file);\n\t}\n\n\tif (!_file && file.url)\n\t{\n\t\t_file = await fetch(file.url, ...argv)\n\t\t\t.then(function (ret)\n\t\t\t{\n\t\t\t\t//console.log(file.name, ret.type, ret.headers);\n\n\t\t\t\tif (!file.mime)\n\t\t\t\t{\n\t\t\t\t\tlet c = ret.headers.get('content-type');\n\n\t\t\t\t\tif (Array.isArray(c))\n\t\t\t\t\t{\n\t\t\t\t\t\tfile.mime = c[0];\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof c === 'string')\n\t\t\t\t\t{\n\t\t\t\t\t\tfile.mime = c;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tif (!file.name && !file.basename && ret.headers.raw()['content-disposition'][0].match(/filename=(['\"])?([^\\'\"]+)\\1/))\n\t\t\t\t\t{\n\t\t\t\t\t\tlet filename = RegExp.$2;\n\n\t\t\t\t\t\tfile.name = path.basename(filename);\n\n\t\t\t\t\t\t//console.log(file.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(ret.headers, ret.headers.raw()['content-disposition'][0]);\n\t\t\t\t//.getResponseHeader('Content-Disposition')\n\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn ret.buffer()\n\t\t\t})\n\t\t\t.then(buf =>\n\t\t\t{\n\n\t\t\t\tif (buf)\n\t\t\t\t{\n\t\t\t\t\tis_from_url = true;\n\t\t\t\t}\n\n\t\t\t\treturn buf;\n\t\t\t})\n\t\t\t.catch(function (e)\n\t\t\t{\n\t\t\t\tis_from_url = false;\n\n\t\t\t\terr = e;\n\n\t\t\t\treturn null;\n\t\t\t})\n\t\t;\n\t}\n\n\tif (_file)\n\t{\n\t\tconst timeout = 5000;\n\n\t\t/**\n\t\t * 如果此部分發生錯誤則自動忽略\n\t\t */\n\t\tawait Bluebird\n\t\t\t.resolve()\n\t\t\t.then(function ()\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * 只壓縮從網路抓取的 PNG 圖片\n\t\t\t\t */\n\t\t\t\tlet pngOptions: imageminPngquant.Options = {\n\t\t\t\t\tquality: is_from_url ? [0.65, 1] : [0.9, 1],\n\t\t\t\t};\n\n\t\t\t\tlet otherOptions: imageminMozjpeg.Options = {\n\t\t\t\t\tquality: is_from_url ? undefined : 100,\n\t\t\t\t};\n\n\t\t\t\tlet pc = BluebirdCancellation\n\t\t\t\t\t.resolve(imagemin.buffer(_file, {\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\timageminOptipng(),\n\t\t\t\t\t\t//imageminJpegtran(),\n\t\t\t\t\t\timageminWebp(),\n\t\t\t\t\t\timageminMozjpeg(otherOptions),\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\timageminPngquant(pngOptions),\n\t\t\t\t\t],\n\t\t\t\t}))\n\t\t\t\t;\n\n\t\t\t\treturn Bluebird.resolve(pc)\n\t\t\t\t\t.timeout(timeout)\n\t\t\t\t\t.tapCatch(TimeoutError, (e) => {\n\t\t\t\t\t\tconsole.error(`[ERROR] imagemin 處理時間過久 ${timeout}ms 放棄壓縮此圖片`)\n\t\t\t\t\t\tpc.cancel();\n\t\t\t\t\t})\n\t\t\t})\n\t\t\t.then(function (buf)\n\t\t\t{\n\t\t\t\tif (Buffer.isBuffer(buf))\n\t\t\t\t{\n\t\t\t\t\t_file = buf\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function (e)\n\t\t\t{\n\t\t\t\tconsole.error('[ERROR] imagemin 發生錯誤，本次將忽略處理此檔案', e.toString().replace(/^\\s+|\\s+$/, ''), file);\n\t\t\t\t//console.error(e);\n\t\t\t})\n\t\t;\n\t}\n\n\tif (!_file)\n\t{\n\t\tlet e = err || new ReferenceError();\n\t\te.data = file;\n\n\t\tthrow e;\n\t}\n\n\tif (file.name && file.ext !== '')\n\t{\n\t\tfile.ext = file.ext || path.extname(file.name);\n\n\t\tif (!file.ext)\n\t\t{\n\t\t\tfile.ext = null;\n\t\t}\n\t}\n\n\tif (!file.ext || !file.mime)\n\t{\n\t\tlet data = await fileType(_file);\n\n\t\tif (data)\n\t\t{\n\t\t\tif (file.ext !== '')\n\t\t\t{\n\t\t\t\tfile.ext = file.ext || '.' + data.ext;\n\t\t\t}\n\n\t\t\tfile.mime = file.mime || data.mime;\n\t\t}\n\t\telse if (file.ext !== '')\n\t\t{\n\t\t\tfile.ext = file.ext || '.unknow';\n\t\t}\n\t}\n\n\tif (!file.name)\n\t{\n\t\tfile.name = (file.basename || hashSum(file)) + file.ext;\n\t}\n\n\tfile.data = _file;\n\n\treturn file;\n}\n\nexport default fetch;\n"]}