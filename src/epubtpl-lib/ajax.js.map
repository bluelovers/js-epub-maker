{"version":3,"file":"ajax.js","sourceRoot":"","sources":["ajax.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport * as fs from 'fs-extra';\nimport fetch = require('isomorphic-fetch');\nimport * as path from \"path\";\nimport { IFiles } from '../config';\nimport fileType = require('file-type');\nimport { hashSum } from '../lib/util';\nimport imagemin = require('imagemin');\nimport imageminJpegtran = require('imagemin-jpegtran');\nimport imageminPngquant = require('imagemin-pngquant');\nimport imageminOptipng = require('imagemin-optipng');\n\nexport { fetch }\n\nexport async function fetchFile(file: IFiles, ...argv)\n{\n\tlet _file;\n\tlet err;\n\n\tif (file.data)\n\t{\n\t\t_file = file.data;\n\t}\n\n\tif (!_file && file.url)\n\t{\n\t\t_file = await fetch(file.url, ...argv)\n\t\t\t.then(function (ret)\n\t\t\t{\n\n\t\t\t\t//console.log(file.name, ret.type, ret.headers);\n\n\t\t\t\tif (!file.mime)\n\t\t\t\t{\n\t\t\t\t\tlet c = ret.headers.get('content-type');\n\n\t\t\t\t\tif (Array.isArray(c))\n\t\t\t\t\t{\n\t\t\t\t\t\tfile.mime = c[0];\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof c === 'string')\n\t\t\t\t\t{\n\t\t\t\t\t\tfile.mime = c;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tif (!file.name && !file.basename && ret.headers.raw()['content-disposition'][0].match(/filename=(['\"])?([^\\'\"]+)\\1/))\n\t\t\t\t\t{\n\t\t\t\t\t\tlet filename = RegExp.$2;\n\n\t\t\t\t\t\tfile.name = path.basename(filename);\n\n\t\t\t\t\t\t//console.log(file.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(ret.headers, ret.headers.raw()['content-disposition'][0]);\n\t\t\t\t//.getResponseHeader('Content-Disposition')\n\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn ret.buffer()\n\t\t\t})\n\t\t\t.catch(function (e)\n\t\t\t{\n\t\t\t\terr = e;\n\t\t\t})\n\n\t\t;\n\t}\n\n\tif (!_file && file.file)\n\t{\n\t\t_file = await fs.readFile(file.file);\n\t}\n\n\tif (_file)\n\t{\n\t\t/**\n\t\t * 如果此部分發生錯誤則自動忽略\n\t\t */\n\t\tawait Promise\n\t\t\t.resolve()\n\t\t\t.then(function ()\n\t\t\t{\n\t\t\t\treturn imagemin.buffer(_file, {\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\timageminOptipng(),\n\t\t\t\t\t\timageminJpegtran(),\n\t\t\t\t\t\timageminPngquant({quality: '65-80'})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t})\n\t\t\t.then(function (buf)\n\t\t\t{\n\t\t\t\tif (Buffer.isBuffer(buf))\n\t\t\t\t{\n\t\t\t\t\t_file = buf\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function (e)\n\t\t\t{\n\t\t\t\tconsole.error('[ERROR] imagemin 發生不明錯誤，本次將忽略此錯誤', e.toString().replace(/^\\s+|\\s+$/, ''));\n\t\t\t\t//console.error(e);\n\t\t\t})\n\t\t;\n\t}\n\n\tif (!_file)\n\t{\n\t\tlet e = err || new ReferenceError();\n\t\te.data = file;\n\n\t\tthrow e;\n\t}\n\n\tif (file.name && file.ext !== '')\n\t{\n\t\tfile.ext = file.ext || path.extname(file.name);\n\n\t\tif (!file.ext)\n\t\t{\n\t\t\tfile.ext = null;\n\t\t}\n\t}\n\n\tif (!file.ext || !file.mime)\n\t{\n\t\tlet data = fileType(_file);\n\n\t\tif (data)\n\t\t{\n\t\t\tif (file.ext !== '')\n\t\t\t{\n\t\t\t\tfile.ext = file.ext || '.' + data.ext;\n\t\t\t}\n\n\t\t\tfile.mime = file.mime || data.mime;\n\t\t}\n\t\telse if (file.ext !== '')\n\t\t{\n\t\t\tfile.ext = file.ext || '.unknow';\n\t\t}\n\t}\n\n\tif (!file.name)\n\t{\n\t\tfile.name = (file.basename || hashSum(file)) + file.ext;\n\t}\n\n\tfile.data = _file;\n\n\treturn file;\n}\n\nexport default fetch;\n"]}